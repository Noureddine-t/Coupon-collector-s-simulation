text = paste("Point de croisement:<br>x =", TotalCollectionNumber[crossing_point_index], "<br>y =", AverageWeeksWithExchange[crossing_point_index]),
showarrow = TRUE, arrowhead = 100, ax = 0, ay = -45,arrowcolor = "blue",  arrowsize = 1,
arrowwidth = 3,
xref = 'x', yref = 'y')
# install.packages("plotly")
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Lire le fichier CSV
data <- read.csv("_SemaineEnFonctionDeNombreA_Collecte_Avec_2_Determiner_taux_d_echange.csv")
AverageWeeksWithExchange<-data$AverageWeeksWithExchange
AverageWeeksWithoutExchange<-data$AverageWeeksWithoutExchange
TotalCollectionNumber<-data$NbrTotalDeCollection
# Trouver l'index du point de croisement des courbes
crossing_point_index <- which(AverageWeeksWithExchange < AverageWeeksWithoutExchange)[1]
max_range <- max(AverageWeeksWithExchange, AverageWeeksWithoutExchange) + 100
# Créer le graphique interactif avec plotly
plot_ly(x = ~TotalCollectionNumber, y = ~AverageWeeksWithoutExchange, type = 'scatter', mode = 'lines', line = list(color = 'purple'), name = '2 vignettes sans echange') %>%
add_trace(x = ~TotalCollectionNumber, y = ~AverageWeeksWithExchange, type = 'scatter', mode = 'lines', line = list(color = 'red'), name = '1 vignette avec echange de 10 doublons') %>%
layout(title = 'Nombre de semaines necessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Nombre total de vignettes dans la collection'),
yaxis = list(title = 'nombres de paquets à acheter/nombre de semaines',rangemode = "tozero", range = c(0, max_range), showline = TRUE)) %>%
# Ajouter une annotation pour le point de croisement
add_annotations(x = TotalCollectionNumber[crossing_point_index],
y = AverageWeeksWithExchange[crossing_point_index],
text = paste("Point de croisement:<br>x =", TotalCollectionNumber[crossing_point_index], "<br>y =", AverageWeeksWithExchange[crossing_point_index]),
showarrow = TRUE, arrowhead = 100, ax = 0, ay = -45,arrowcolor = "blue",  arrowsize = 1,
arrowwidth = 3,
xref = 'x', yref = 'y')
# install.packages("plotly")
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Lire le fichier CSV
data <- read.csv("_SemaineEnFonctionDeNombreA_Collecte_Avec_2_Determiner_taux_d_echange.csv")
AverageWeeksWithExchange<-data$AverageWeeksWithExchange
AverageWeeksWithoutExchange<-data$AverageWeeksWithoutExchange
TotalCollectionNumber<-data$NbrTotalDeCollection
# Trouver l'index du point de croisement des courbes
crossing_point_index <- which(AverageWeeksWithExchange < AverageWeeksWithoutExchange)[1]
max_range <- max(AverageWeeksWithExchange, AverageWeeksWithoutExchange) + 100
# Créer le graphique interactif avec plotly
plot_ly(x = ~TotalCollectionNumber, y = ~AverageWeeksWithoutExchange, type = 'scatter', mode = 'lines', line = list(color = 'purple'), name = '2 vignettes sans echange') %>%
add_trace(x = ~TotalCollectionNumber, y = ~AverageWeeksWithExchange, type = 'scatter', mode = 'lines', line = list(color = 'red'), name = '1 vignette avec echange de 10 doublons') %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Nombre total de vignettes dans la collection'),
yaxis = list(title = 'nombres de paquets à acheter/nombre de semaines',rangemode = "tozero", range = c(0, max_range), showline = TRUE)) %>%
# Ajouter une annotation pour le point de croisement
add_annotations(x = TotalCollectionNumber[crossing_point_index],
y = AverageWeeksWithExchange[crossing_point_index],
text = paste("Point de croisement:<br>x =", TotalCollectionNumber[crossing_point_index], "<br>y =", AverageWeeksWithExchange[crossing_point_index]),
showarrow = TRUE, arrowhead = 100, ax = 0, ay = -45,arrowcolor = "blue",  arrowsize = 1,
arrowwidth = 3,
xref = 'x', yref = 'y')
# install.packages("plotly")
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Lire le fichier CSV
data <- read.csv("_SemaineEnFonctionDeNombreA_Collecte_Avec_2_Determiner_taux_d_echange.csv")
AverageWeeksWithExchange<-data$AverageWeeksWithExchange
AverageWeeksWithoutExchange<-data$AverageWeeksWithoutExchange
TotalCollectionNumber<-data$NbrTotalDeCollection
# Trouver l'index du point de croisement des courbes
crossing_point_index <- which(AverageWeeksWithExchange < AverageWeeksWithoutExchange)[1]
max_range <- max(AverageWeeksWithExchange, AverageWeeksWithoutExchange) + 100
# Créer le graphique interactif avec plotly
plot_ly(x = ~TotalCollectionNumber, y = ~AverageWeeksWithoutExchange, type = 'scatter', mode = 'lines', line = list(color = 'purple'), name = '2 vignettes sans echange') %>%
add_trace(x = ~TotalCollectionNumber, y = ~AverageWeeksWithExchange, type = 'scatter', mode = 'lines', line = list(color = 'red'), name = '1 vignette avec echange de 10 doublons') %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Nombre total de vignettes dans la collection'),
yaxis = list(title = 'nombres de paquets à acheter/nombre de semaines',rangemode = "tozero", range = c(0, max_range), showline = TRUE)) %>%
# Ajouter une annotation pour le point de croisement
add_annotations(x = TotalCollectionNumber[crossing_point_index],
y = AverageWeeksWithExchange[crossing_point_index],
text = paste("Point de croisement:<br>x =", TotalCollectionNumber[crossing_point_index], "<br>y =", AverageWeeksWithExchange[crossing_point_index]),
showarrow = TRUE, arrowhead = 100, ax = 0, ay = -45,arrowcolor = "blue",  arrowsize = 1,
arrowwidth = 3,
xref = 'x', yref = 'y')
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~Prix d échange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~Prix d échange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~Prix d échange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
# Ajouter un titre au graphique
plot <- plot %>% layout(title = " NbrTotalDeCollection en fonction du prix d\' echange")
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Ajouter la droite d'approximation
plot <- add_trace(plot, x = data$PrixD_Echange, y = predict(model), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Afficher la figure
print(plot)
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Nombre total de vignettes dans la collection'),
yaxis = list(title = 'nombres de paquets à acheter/nombre de semaines',rangemode = "tozero", range = c(0, max_range), showline = TRUE)) %>%
# Ajouter un titre au graphique
plot <- plot %>% layout(title = " NbrTotalDeCollection en fonction du prix d\' echange")
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection',rangemode = "tozero", range = c(0, max_range), showline = TRUE)) %>%
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection',rangemode = "tozero", range = c(0, max_range), showline = TRUE)) %>%
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection'))
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection'))
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection'))
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection'))
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement")
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection'))
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement") %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croissement") %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajuster un modèle linéaire
lm(NbrTotalDeCollection ~ PrixD_Echange, data = data) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(.), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajuster un modèle linéaire
lm(NbrTotalDeCollection ~ PrixD_Echange, data = data) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(.), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajuster un modèle linéaire
lm(NbrTotalDeCollection ~ PrixD_Echange, data = data) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(.), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Nombre de semaines nécessaires pour compléter la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(model, newdata = data), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Afficher la figure
print(plot)
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Nombre de semaines nécessaires pour compléter la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(model, newdata = data), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Afficher la figure
print(plot)
rm(list = ls())
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Nombre de semaines nécessaires pour compléter la collection en fonction du nombre de vignettes dans la collection',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(model, newdata = data), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Afficher la figure
print(plot)
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Point de croissement des deux courbes en fonction du prix d\'échange',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(model, newdata = data), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Afficher la figure
print(plot)
# Installer la bibliothèque Plotly si ce n'est pas déjà fait
# install.packages("plotly")
# Charger la bibliothèque Plotly
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données du fichier CSV
data <- read.csv("_CollectionNumber_en_fonction_du_taux_echange_pour_croiser_deux_courbe_avec_vignetteNumber_2.csv")
# Ajuster un modèle linéaire
model <- lm(NbrTotalDeCollection ~ PrixD_Echange, data = data)
# Tracer la courbe
plot <- plot_ly(data, x = ~PrixD_Echange, y = ~NbrTotalDeCollection, type = 'scatter', mode = 'lines+markers', name="points de croisement") %>%
layout(title = 'Point de croissement des deux courbes (2 vignettes sans échange et 1 vignette avec échange) en fonction du prix d\'échange',
xaxis = list(title = 'Prix d\'échange'),
yaxis = list(title = 'Nombre total de vignettes dans la collection')) %>%
# Ajouter la droite d'approximation
add_trace(x = data$PrixD_Echange, y = predict(model, newdata = data), mode = 'lines', type = 'scatter', name = 'Droite d\'approximation')
# Afficher la figure
print(plot)
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données fournies
data <- read.csv("nombre_paquet_a_acheter_en_fct_de_prix_echange_avec_1_2_3_4_5_vignette_par_cereale.csv")
# Renommer les colonnes pour éviter les problèmes avec plot_ly
colnames(data) <- c("PrixD_Echange", "Function_1", "Function_2", "Function_3", "Function_4", "Function_5")
# Extraire les variables
PrixD_Echange <- data$PrixD_Echange
Function_1 <- data$Function_1
Function_2 <- data$Function_2
Function_3 <- data$Function_3
Function_4 <- data$Function_4
Function_5 <- data$Function_5
# Trouver la plage maximale pour l'axe des ordonnées
max_range <- max(Function_1, Function_2, Function_3, Function_4, Function_5) + 100
# Tracer les courbes interactives avec Plotly
plot_ly() %>%
add_trace(x = ~PrixD_Echange, y = ~Function_1, name = '1 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_2, name = '2 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_3, name = '3 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_4, name = '4 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_5, name = '5 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
layout(title = 'nombre de semaines (collection de 500) VS prix d echange pour nombre de vignettes 1 2 3 4 5',
xaxis = list(title = 'Prix d\'echange'),
yaxis = list(title = 'nombres de paquets a acheter/nombre de semaines', rangemode = "tozero", range = c(0, max_range), showline = TRUE))
# Afficher le graphique interactif
library(plotly)
# Obtenez le chemin du répertoire du script R
script_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
# Changez le répertoire de travail
setwd(script_directory)
# Les données fournies
data <- read.csv("nombre_paquet_a_acheter_en_fct_de_prix_echange_avec_1_2_3_4_5_vignette_par_cereale.csv")
# Renommer les colonnes pour éviter les problèmes avec plot_ly
colnames(data) <- c("PrixD_Echange", "Function_1", "Function_2", "Function_3", "Function_4", "Function_5")
# Extraire les variables
PrixD_Echange <- data$PrixD_Echange
Function_1 <- data$Function_1
Function_2 <- data$Function_2
Function_3 <- data$Function_3
Function_4 <- data$Function_4
Function_5 <- data$Function_5
# Trouver la plage maximale pour l'axe des ordonnées
max_range <- max(Function_1, Function_2, Function_3, Function_4, Function_5) + 100
# Tracer les courbes interactives avec Plotly
plot_ly() %>%
add_trace(x = ~PrixD_Echange, y = ~Function_1, name = '1 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_2, name = '2 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_3, name = '3 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_4, name = '4 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~PrixD_Echange, y = ~Function_5, name = '5 vignette dans le céréale', type = 'scatter', mode = 'lines') %>%
layout(title = 'Nombre de semaines nécessaires pour completer la collection de 500 vignettes en fonction du prix d\'échange pour nombre de vignettes 1 2 3 4 5',
xaxis = list(title = 'Prix d\'echange'),
yaxis = list(title = 'nombres de paquets a acheter/nombre de semaines', rangemode = "tozero", range = c(0, max_range), showline = TRUE))
# Afficher le graphique interactif
